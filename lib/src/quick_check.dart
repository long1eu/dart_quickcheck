// File created by
// Lung Razvan <long1eu>
// on 19/09/2018

import 'dart:math';

import 'package:dart_quickcheck/src/characteristic.dart';
import 'package:dart_quickcheck/src/generator.dart';
import 'package:dart_quickcheck/src/guard_error.dart';
import 'package:dart_quickcheck/src/runner.dart';
import 'package:dart_quickcheck/src/runner_impl.dart';

/**
 * QuickCheck is an implementation of the Haskell QuickCheck generator based
 * test tool (http://www.cs.chalmers.se/~rjmh/QuickCheck/).
 */
class QuickCheck {
  static final int MAX_NUMBER_OF_RUNS = 200;
  static final int MIN_NUMBER_OF_RUNS = 1;

  static int getDefaultNumberOfRuns() {
    int runs = MAX_NUMBER_OF_RUNS;
    return max(MIN_NUMBER_OF_RUNS, runs);
  }

  /**
   * Check the {@link Characteristic} for all values generated by the given
   * {@link Generator}. The execution will fail fast if any of the calls of
   * the {@link Characteristic#specify(Object)} method throws an exception.
   *
   * @param runs
   *            number of runs and generated values for this characteristic
   * @param <T>
   *            type of the generated values
   * @throws CharacteristicException
   *             if a characteristic is not <code>true</code> for a generated
   *             value
   * @throws GeneratorException
   *             if generation of the next value failed.
   */
  static void forAll<T>(
      int runs, Generator<T> generator, Characteristic<T> characteristic) {
    runs = runs ?? MAX_NUMBER_OF_RUNS;
    runner(characteristic, runs, generator, StringBuffer()).forAll();
  }

  /**
   * Check the {@link Characteristic} for all values generated by the given
   * {@link Generator}. The execution will fail fast if any of the calls of
   * the {@link Characteristic#specify(Object)} method throws an exception.
   *
   * @param runs
   *            number of runs and generated values for this characteristic
   * @param <T>
   *            type of the generated values
   * @throws CharacteristicException
   *             if a characteristic is not <code>true</code> for a generated
   *             value
   * @throws GeneratorException
   *             if generation of the next value failed.
   */
  static void forAllVerbose<T>(
      int runs, Generator<T> generator, Characteristic<T> characteristic) {
    runs = runs ?? MAX_NUMBER_OF_RUNS;
    runner(characteristic, runs, generator, StringBuffer()).forAll();
  }

  /**
   * All executions of {@link Characteristic#specify(Object)} which execute
   * {@link QuickCheck#guard(boolean)} will be skipped and a new test case
   * will be generated. Execution will be stopped if it is not possible to
   * create a new test cases after a reasonable amount of tries.
   *
   * @param predicate
   *            Skip the current test case if the predicate is true.
   */
  static void guard(bool predicate) {
    if (!predicate) throw new GuardError();
  }

  static Runner<T> runner<T>(Characteristic<T> characteristic, int runs,
      Generator<T> generator, StringBuffer writer) {
    return new RunnerImpl<T>(characteristic, runs, generator, writer);
  }
}
