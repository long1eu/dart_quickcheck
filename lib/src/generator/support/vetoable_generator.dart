// File created by
// Lung Razvan <long1eu>
// on 19/09/2018
import 'package:dart_quickcheck/src/generator.dart';
import 'package:dart_quickcheck/src/generator_error.dart';
import 'package:dart_quickcheck/src/util/util.dart';

/**
 * Base class for generators which can reject the values generated by their
 * wrapped generator. This will be tried until the maximum number of tries is
 * reached.
 */
class VetoableGenerator<T> implements Generator<T> {
  final Generator<T> generator;
  final int maxTries;

  /**
   * @return true to accept the current value.
   */
  final bool Function(T value) tryValue;

  // TODO this could be a bit high
  // for runs = 200 this means 20000 tries for the worst case
  static const int DEFAULT_MAX_TRIES = 100;

  static const int MIN_TRIES = 1;

  VetoableGenerator(this.generator, this.tryValue,
      [this.maxTries = DEFAULT_MAX_TRIES]) {
    Assert.greaterOrEqual(MIN_TRIES, maxTries, "maxTries");
  }

  @override
  T next() {
    for (int idx = 0; idx < maxTries; idx++) {
      T value = generator.next();
      if (tryValue(value)) {
        return value;
      }
    }
    throw new GeneratorError(
        "Failed to generate another value after [$maxTries] tries (generator: $generator)",
        generator);
  }
}
