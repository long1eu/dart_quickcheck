// File created by
// Lung Razvan <long1eu>
// on 19/09/2018

import 'dart:math';

/**
 * The {@link RandomConfiguration} allows to get and set the seed of the random
 * number generator.
 *
 * <p>
 * Setting the seed allows to run test deterministically with the same generated
 * objects. The {@link #setSeed(long)} method can be used for that.
 * <p>
 * <p>
 * An the other hand the {@link #initSeed()} method sets a new random seed and
 * return it. This allows to generate random test objects in one run and repeat
 * the same test by setting the seed with {@link #setSeed(long)}.
 * </p>
 * <p>
 * You can set the seed for the JVM with {@link #SEED_SYSTEM_PROPERTY}. This
 * system property will be evaluated at start up. Calling {@link #setSeed(long)}
 * will overwrite this setting.
 * </p>
 */
class RandomConfiguration {
  /**
   * System property ({@value #SEED_SYSTEM_PROPERTY}) to set the {@link Long
   * long} seed value for the random number generator.
   * <p>
   * Note: The actual values generated by the RNG still depend on the
   * execution order. That may be not under the control of quickcheck.
   * </p>
   */
  static final Random random = new Random(2 ^ 32);
  static double _nextNextGaussian;
  static bool _haveNextNextGaussian = false;

  static double nextGaussian() {
    if (_haveNextNextGaussian) {
      _haveNextNextGaussian = false;
      return _nextNextGaussian;
    } else {
      double v1, v2, s;
      do {
        v1 = 2 * random.nextDouble() - 1; // between -1.0 and 1.0
        v2 = 2 * random.nextDouble() - 1; // between -1.0 and 1.0
        s = v1 * v1 + v2 * v2;
      } while (s >= 1 || s == 0);
      double multiplier = sqrt(-2 * log(s) / s);
      _nextNextGaussian = v2 * multiplier;
      _haveNextNextGaussian = true;
      return v1 * multiplier;
    }
  }

  RandomConfiguration._();
}
